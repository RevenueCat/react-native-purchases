version: 2.1
orbs:
  rn: react-native-community/react-native@4.4.2
commands:
  start_simulator:
    steps:
      - run:
          background: true
          command: xcrun simctl boot "iPhone X" || true
          name: Start iOS simulator (background)
  yarn_bootstrap:
    steps:
      - run:
          name: Setup Example
          command: yarn bootstrap
  android_build:
    steps:
      - restore_cache:
          key: jars-{{ checksum "example/android/build.gradle" }}-{{ checksum  "example/android/app/build.gradle" }}
          name: Restoring Gradle Build caches
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
          working_directory: example/android
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "example/android/build.gradle" }}-{{ checksum  "example/android/app/build.gradle" }}
      - run:
          command: chmod +x gradlew && ./gradlew --build-cache --max-workers 2 --continue assembleRelease -DtestBuildType=release --stacktrace
          name: Build Android APK
          working_directory: example/android
  ios_build:
    steps:
      - restore_cache:
          keys:
            - ios-build-cache-{{ arch }}-{{ checksum "package.json" }}-{{ .Environment.CACHE_VERSION }}
          name: Restoring iOS Build caches
      - run:
          command: >-
            set -o pipefail && export RCT_NO_LAUNCH_PACKAGER=true && env NSUnbufferedIO=YES xcodebuild -scheme ReactNativeSample -project ./ReactNativeSample.xcodeproj -destination 'platform=iOS Simulator,name=iPhone 11 Pro' -parallelizeTargets -UseModernBuildSystem=YES -derivedDataPath '~/DerivedData' |  xcpretty -k
          name: Build iOS App
          working_directory: example/ios
      - save_cache:
          key: ios-build-cache-{{ arch }}-{{ checksum "package.json" }}-{{ .Environment.CACHE_VERSION }}
          name: Saving iOS Build Cache
          paths:
            - example/ios/build/Build
          when: always

executors:
  node:
    docker:
      - image: circleci/node:10

  android:
    environment:
      - _JAVA_OPTIONS: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      - GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-XX:+UnlockExperimentalVMOptions -XX:+HeapDumpOnOutOfMemoryError"
      - BUILD_THREADS: 2
      - JVM_OPTS: -Xmx3200m
    docker:
      - image: reactnativecommunity/react-native-android

  ios:
    macos:
      xcode: 11.4.0
    # use a --login shell so our "set Ruby version" command gets picked up for later steps
    shell: /bin/bash --login -o pipefail

jobs:
  checkout_code:
    executor: node
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths: .
  analyse_js:
    executor: node
    steps:
      - attach_workspace:
          at: .
      # - restore_cache:
      #     name: Restore Yarn Package Cache
      #     keys:
      #       - yarn-packages-{{ checksum "yarn.lock" }}
      - yarn_bootstrap
      - run:
          name: Tests
          command: yarn test
      - run:
          name: Linter
          command: yarn run tslint
      # - save_cache:
      #     name: Save Yarn Package Cache
      #     key: yarn-packages-{{ checksum "yarn.lock" }}
      #     paths:
      #       - ~/.cache/yarn
  android:
    executor: android
    steps:
      - attach_workspace:
          at: .
      - yarn_bootstrap
      - android_build
  ios:
    executor: ios
    steps:
      - attach_workspace:
          at: .
      - start_simulator
      - yarn_bootstrap
      - rn/ios_build:
          build_configuration: Release
          device: iPhone X
          project_path: example/ios/ReactNativeSample.xcworkspace
          scheme: ReactNativeSample          

workflows:
  test:
    jobs:
      - checkout_code
      - analyse_js:
          requires:
            - checkout_code
      - android:
          requires:
            - checkout_code
      - ios:
          requires:
            - checkout_code
