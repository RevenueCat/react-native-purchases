files_with_version_number = {
    './.version' => ['{x}'],
    './package.json' => ['"version": "{x}"'],
    './ios/RNPurchases.m' => ['return @"{x}"'],
    './android/build.gradle' => ['versionName \'{x}\''],
    './android/src/main/java/com/revenuecat/purchases/react/RNPurchasesModule.java' => ['PLUGIN_VERSION = "{x}"'],
    './scripts/docs/index.html' => ['react-native-purchases-docs/{x}/']
}
files_to_update_phc_version = {
    'RNPurchases.podspec' => ['"PurchasesHybridCommon", \'{x}\''],
    'android/build.gradle' => ['com.revenuecat.purchases:purchases-hybrid-common:{x}'],
    'package.json' => ['"@revenuecat/purchases-typescript-internal": "{x}"']
}
repo_name = 'react-native-purchases'
changelog_latest_path = './CHANGELOG.latest.md'
changelog_path = './CHANGELOG.md'
versions_path = './VERSIONS.md'

before_all do
  setup_circle_ci
end

desc "Bump version, edit changelog, and create pull request"
lane :bump do |options|
  phc_version = get_phc_version
  bump_version_update_changelog_create_pr(
    current_version: current_version_number,
    changelog_latest_path: changelog_latest_path,
    changelog_path: changelog_path,
    files_to_update: files_with_version_number,
    files_to_update_without_prerelease_modifiers: {},
    repo_name: repo_name,
    github_rate_limit: options[:github_rate_limit],
    editor: options[:editor],
    next_version: options[:next_version],
    automatic_release: options[:automatic_release],
    hybrid_common_version: phc_version,
    versions_file_path: versions_path,
    is_prerelease: options[:is_prerelease]
  )
  update_hybrids_versions_file(
    versions_file_path: versions_path,
    new_sdk_version: current_version_number,
    hybrid_common_version: phc_version
  )
  commit_current_changes(commit_message: 'Update VERSIONS.md')
  push_to_git_remote(set_upstream: true)
end

desc "Automatically bumps version, edit changelog, and create pull request"
lane :automatic_bump do |options|
  next_version, type_of_bump = determine_next_version_using_labels(
    repo_name: repo_name,
    github_rate_limit: options[:github_rate_limit]
  )
  options[:next_version] = next_version
  options[:automatic_release] = true
  if type_of_bump == :skip
    UI.message('Skipping automatic bump since the next version doesn\'t include public facing changes')
    next
  elsif type_of_bump == :major
    UI.message('Skipping automatic bump since the next version is a major release')
    next
  end
  bump(options)
end

desc "Make github release"
lane :github_release do |options|
  create_github_release(
    version: options[:version],
    repo_name: repo_name,
    github_api_token: ENV["GITHUB_TOKEN"],
    changelog_latest_path: changelog_latest_path,
    upload_assets: []
  )
end

desc "Creates GitHub release and publishes package"
lane :release do |options|
  version_number = current_version_number
  is_prerelease = Gem::Version.new(version_number).prerelease?

  args = [
    'npm',
    'publish',
    is_prerelease ? '--tag next' : nil
  ].compact

  Dir.chdir(get_root_folder) do
    sh(args)
  end
  github_release(version: version_number)
end

desc "Build example"
lane :build_example do |options|
  Dir.chdir(get_root_folder) do
    sh("yarn example")
  end
  Dir.chdir(File.expand_path('examples/purchaseTesterTypescript', get_root_folder)) do
    sh("npx pod-install")
  end
end

desc "Update purchases-hybrid-common version, pushes changes to a new branch if open_pr option is true"
lane :update_hybrid_common do |options|
  if options[:dry_run]
    dry_run = true
  end
  if options[:version]
    new_version_number = options[:version]
  else
    UI.user_error!("Missing `version` argument")
  end

  current_phc_version = get_phc_version

  UI.message("‚ÑπÔ∏è  Current Purchases Hybrid Common version: #{current_phc_version}")
  UI.message("‚ÑπÔ∏è  Setting Purchases Hybrid Common version: #{new_version_number}")

  if dry_run
    UI.message("‚ÑπÔ∏è  Nothing more to do, dry_run: true")
    next
  end

  bump_phc_version(
    repo_name: 'react-native-purchases',
    files_to_update: files_to_update_phc_version,
    current_version: current_phc_version,
    next_version: new_version_number,
    open_pr: options[:open_pr] || false,
    automatic_release: options[:automatic_release] || false
  )
end

desc "Generate docs"
lane :generate_docs do
  version_number = current_version_number
  docs_repo_base_url = "https://github.com/RevenueCat/"
  docs_repo_name = "react-native-purchases-docs"
  docs_repo_url = File.join(docs_repo_base_url, docs_repo_name)

  Dir.mktmpdir do |docs_generation_folder|
    # Must be run from the root dir
    Dir.chdir("..") do
      sh(
        "npx",
        "typedoc",
        "--out",
        docs_generation_folder
      )

      docs_index_path = File.join(Dir.pwd, "scripts/docs/index.html")

      # clone docs repo
      Dir.mktmpdir do |docs_repo_clone_dir|
        Dir.chdir(docs_repo_clone_dir) do
          sh("git", "clone", docs_repo_url)
          Dir.chdir(docs_repo_name) do
            # copy docs generated in the previous step into the docs folder and push the changes
            docs_destination_folder = "docs/#{version_number}"
            index_destination_path = "docs/index.html"
            FileUtils.cp_r docs_generation_folder, docs_destination_folder
            FileUtils.cp docs_index_path, index_destination_path

            # using sh instead of fastlane commands because fastlane would run from the repo root
            sh("git", "add", docs_destination_folder)
            sh("git", "add", index_destination_path)
            sh("git", "commit", "-m", "Update documentation for #{version_number}")
            sh("git", "push")
          end
        end
      end
    end
  end
end

desc "Tag current branch with current version number"
lane :tag_current_branch do |options|
  version_number = current_version_number
  check_no_git_tag_exists(version_number)

  add_git_tag(tag: version_number)
  push_git_tags(tag: version_number)
end

###############################################################################
# Helper functions ü§úü§õ                                                      #
###############################################################################

def get_phc_version
  Dir.chdir(get_root_folder) do
    return (sh "cat RNPurchases.podspec | grep \'\"PurchasesHybridCommon\", \' | awk \'{print($3)}\' | sed \"s/\'//g\"").strip
  end
end

def parse_pod_version
  Dir.chdir(get_root_folder) do
    return sh("cat examples/purchaseTesterTypescript/ios/Podfile.lock | grep \' Purchases (=\' | awk \'{print($4)}\' | sed \"s/)//g\"").strip
  end
end

def get_root_folder
  return File.expand_path('../../', __FILE__)
end

def current_version_number
  File.read("../.version").strip
end

def check_no_git_tag_exists(version_number)
  if git_tag_exists(tag: version_number, remote: true, remote_name: 'origin')
    raise "git tag with version #{version_number} already exists!"
  end
end
